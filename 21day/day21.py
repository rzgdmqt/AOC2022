# part 1
(lambda graph =  {v: v_n for v, v_n in map(lambda o: o.split(": "), open("21day/d").read().split("\n"))},ops={"+": lambda x, y : x + y, "*": lambda x, y : x * y, "-": lambda x, y : x - y, "/": lambda x, y : x // y}:(lambda dfs=lambda v:(lambda f, *a: f(f, *a))(lambda aux, v: int(graph[v]) if graph[v].isdigit() else ops[graph[v].split(" ")[1]](aux(aux, graph[v].split(" ")[0]), aux(aux, graph[v].split(" ")[2])), v): print(dfs("root")))())()
# part 2
(lambda graph =  {v: v_n for v, v_n in map(lambda o: o.split(": "), open("21day/d").read().split("\n"))}:(graph.pop("humn") and False) or (lambda dfs=lambda v:(lambda f, *a: f(f, *a))(lambda aux, v: "humn" if v == "humn" else (graph[v] if graph[v].isdigit() else f"({aux(aux, graph[v].split(' ')[0])} {graph[v].split(' ')[1]} {aux(aux, graph[v].split(' ')[2])})"), v): (lambda ab = graph["root"].split(" + "):graph.pop("root") and False or (lambda humn=__import__("sympy").Symbol("humn"),ab = list(map(lambda o: dfs(o), ab)): print(int(__import__("sympy.solvers").solve(eval(ab[0]) - eval(ab[1]), humn)[0])))())())())()