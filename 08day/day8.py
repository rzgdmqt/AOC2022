# part 1
print((lambda input: (lambda parsed_input=list(map(list, input)),visible=(lambda i, j, field: any([all(x < field[i][j] for x in [field[k][j] for k in range(i)]),all(x < field[i][j] for x in [field[k][j] for k in range(i+1,len(field[0]))]),all(x < field[i][j] for x in [field[i][k] for k in range(j+1,len(field))]),all(x < field[i][j] for x in [field[i][k] for k in range(j)])])): 2 * len(parsed_input) + 2 * (len(parsed_input[0]) - 2) + sum(1 for i in range(1, len(parsed_input) - 1) for j in range(1, len(parsed_input[0]) - 1) if visible(i, j, parsed_input)))())(open("d").read().split()))
# part 2
print((lambda input: (lambda parsed_input=list(map(list, input)),score=(lambda i, j, field, switch: len([switch.insert(0, True) or switch.pop(1) or int(x) if x >= field[i][j] else int(x) for x in reversed([field[k][j] for k in range(i)]) if not switch[0]]).__mul__(len([switch.insert(1, True) or switch.pop(2) or int(x) if x >= field[i][j] else int(x)for x in [field[k][j] for k in range(i+1,len(field[0]))]if not switch[1]])).__mul__(len([switch.insert(2, True) or switch.pop(3) or int(x) if x >= field[i][j] else int(x)for x in [field[i][k] for k in range(j+1,len(field))]if not switch[2]])).__mul__(len([switch.insert(3, True) or switch.pop(4) or int(x) if x >= field[i][j] else int(x)for x in reversed([field[i][k] for k in range(j)])if not switch[3]]))): max(score(i, j, parsed_input, [False, False, False, False])for i in range(1, len(parsed_input) - 1) for j in range(1, len(parsed_input[0]) - 1)))())(open("d").read().split()))


